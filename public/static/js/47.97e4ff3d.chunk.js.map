{"version":3,"file":"static/js/47.97e4ff3d.chunk.js","mappings":"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","sources":["tasks/components/TaskModal.js","tasks/pages/UsersTasks.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\r\nimport {\r\n  FaClock,\r\n  FaExclamationCircle,\r\n  FaStickyNote,\r\n  FaCalendarAlt,\r\n  FaUserFriends,\r\n  FaTrash,\r\n  FaEdit,\r\n  FaTimes,\r\n  FaUserShield,\r\n  FaUsers,\r\n  FaClipboardList,\r\n  FaSpinner,\r\n  FaCheckCircle,\r\n} from \"react-icons/fa\";\r\nimport moment from \"moment\";\r\nimport Button from \"../../shared/components/UIElements/Button\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport \"./TaskModal.css\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/Hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\n\r\nconst TaskModal = ({ task, onClose, onDelete }) => {\r\n  const auth = useContext(AuthContext);\r\n  const { error, sendRequest, errorHandler } = useHttpClient();\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n\r\n  const openConfirmHandler = () => setShowConfirm(true);\r\n  const closeConfirmHandler = () => setShowConfirm(false);\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirm(false);\r\n\r\n    try {\r\n      await sendRequest(\r\n        process.env.REACT_APP_BACKEND_URL + `/tasks/${task.id}`,\r\n        \"DELETE\",\r\n        null,\r\n        { Authorization: \"Bearer \" + auth.token }\r\n      );\r\n      onDelete(task.id);\r\n      onClose();\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status) => {\r\n    switch (status) {\r\n      case \"todo\":\r\n        return <FaClipboardList />;\r\n      case \"inProgress\":\r\n        return <FaSpinner />;\r\n      case \"done\":\r\n        return <FaCheckCircle />;\r\n      default:\r\n        return <FaClipboardList />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority) => {\r\n    switch (priority.toLowerCase()) {\r\n      case \"high\":\r\n        return \"#ff4757\";\r\n      case \"medium\":\r\n        return \"#ffa502\";\r\n      case \"low\":\r\n        return \"#2ed573\";\r\n      default:\r\n        return \"#00b894\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={errorHandler} />\r\n      <Modal\r\n        show={true}\r\n        onCancel={onClose}\r\n        header={\r\n          <div className=\"modal-header\">\r\n            <h2>\r\n              {getStatusIcon(task.status)}\r\n              {task.title}\r\n            </h2>\r\n            <button className=\"close-button\" onClick={onClose}>\r\n              <FaTimes />\r\n            </button>\r\n          </div>\r\n        }\r\n        footer={\r\n          <div className=\"modal-footer\">\r\n            <Button inverse onClick={onClose}>\r\n              Close\r\n            </Button>\r\n            <Button to={`/tasks/${task.id}`} className=\"update-btn\">\r\n              <FaEdit /> Edit Task\r\n            </Button>\r\n            <Button danger onClick={openConfirmHandler} className=\"delete-btn\">\r\n              <FaTrash /> Delete Task\r\n            </Button>\r\n          </div>\r\n        }\r\n      >\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"task-description\">\r\n            <h3>\r\n              <FaClipboardList />\r\n              Task Description\r\n            </h3>\r\n            <p>{task.description}</p>\r\n          </div>\r\n\r\n          <div className=\"task-content\">\r\n            <div className=\"date-item\">\r\n              <FaCalendarAlt />\r\n              <div>\r\n                <h4>Due Date</h4>\r\n                <p>{moment(task.dueDate).format(\"MMMM D, YYYY\")}</p>\r\n              </div>\r\n            </div>\r\n            <div className={`priority-item ${task.priority.toLowerCase()}`}>\r\n              <FaExclamationCircle\r\n                style={{ color: getPriorityColor(task.priority) }}\r\n              />\r\n              <div>\r\n                <h4>Priority Level</h4>\r\n                <p>{task.priority}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"timeline-item\">\r\n              <FaClock />\r\n              <div>\r\n                <h4>Timeline</h4>\r\n                <p>{task.timeline}</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"assigned-users-item\">\r\n              {task.role === \"admin\" ? <FaUserShield /> : <FaUsers />}\r\n              <div>\r\n                <h4>Task Creator</h4>\r\n                <p>{task.creatorName}</p>\r\n              </div>\r\n            </div>\r\n            {task.assignedUsers && task.assignedUsers.length > 0 && (\r\n              <div className=\"assigned-users-item\">\r\n                <FaUserFriends />\r\n                <div>\r\n                  <h4>Assigned Team Members</h4>\r\n                  <div className=\"assigned-users-list\">\r\n                    {task.assignedUsers.map((user) => (\r\n                      <span key={user.id} className=\"assigned-user\">\r\n                        <FaUsers />\r\n                        {user.name}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div className=\"notes-item\">\r\n              <FaStickyNote />\r\n              <div>\r\n                <h4>Additional Notes</h4>\r\n                <p>{task.notes || \"No additional notes provided.\"}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={showConfirm}\r\n        onCancel={closeConfirmHandler}\r\n        header=\"Confirm Task Deletion\"\r\n        footer={\r\n          <div className=\"confirm-actions\">\r\n            <Button inverse onClick={closeConfirmHandler}>\r\n              Cancel\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              <FaTrash /> Delete Task\r\n            </Button>\r\n          </div>\r\n        }\r\n      >\r\n        <div className=\"confirm-content\">\r\n          <FaExclamationCircle className=\"warning-icon\" />\r\n          <h3>Are you sure you want to delete this task?</h3>\r\n          <p>\r\n            This will permanently delete \"{task.title}\" and all its associated\r\n            data. This action cannot be undone. Please make sure you have backed\r\n            up any important information.\r\n          </p>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n","import { DragDropContext, Droppable, Draggable } from \"@hello-pangea/dnd\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  FaClock,\r\n  FaExclamationCircle,\r\n  FaUsers,\r\n  FaUserShield,\r\n  FaClipboardList,\r\n  FaSpinner,\r\n  FaCheckCircle,\r\n  FaLightbulb,\r\n  FaArrowRight\r\n} from \"react-icons/fa\";\r\nimport moment from \"moment\";\r\nimport \"./UsersTasks.css\";\r\nimport TaskModal from \"../components/TaskModal\";\r\nimport { useHttpClient } from \"../../shared/Hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst UsersTasks = () => {\r\n  const [columns, setColumns] = useState({\r\n    todo: { \r\n      id: \"todo\", \r\n      title: \"To Do\", \r\n      taskIds: [], \r\n      icon: <FaClipboardList />,\r\n      description: \"Tasks that need to be started\"\r\n    },\r\n    inProgress: { \r\n      id: \"inProgress\", \r\n      title: \"In Progress\", \r\n      taskIds: [], \r\n      icon: <FaSpinner />,\r\n      description: \"Tasks currently being worked on\"\r\n    },\r\n    done: { \r\n      id: \"done\", \r\n      title: \"Done\", \r\n      taskIds: [], \r\n      icon: <FaCheckCircle />,\r\n      description: \"Completed tasks\"\r\n    },\r\n  });\r\n\r\n  const [tasks, setTasks] = useState({});\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const { isLoading, error, sendRequest, errorHandler } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      let fetchTask;\r\n      try {\r\n        fetchTask = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + `/tasks/user/${userId}`,\r\n          \"GET\",\r\n          null,\r\n          {\r\n            Authorization: \"Bearer \" + auth.token,\r\n          }\r\n        );\r\n\r\n        if (!fetchTask || !Array.isArray(fetchTask)) {\r\n          console.error(\"Invalid response format:\", fetchTask);\r\n          return;\r\n        }\r\n\r\n        const tasksObject = {};\r\n        const columnTaskIds = {\r\n          todo: [],\r\n          inProgress: [],\r\n          done: [],\r\n        };\r\n\r\n        fetchTask.forEach((task) => {\r\n          tasksObject[task.id] = task;\r\n          const status = task.status || \"todo\";\r\n          if (columnTaskIds.hasOwnProperty(status)) {\r\n            columnTaskIds[status].push(task.id);\r\n          }\r\n        });\r\n        setTasks(tasksObject);\r\n        setColumns({\r\n          todo: { ...columns.todo, taskIds: columnTaskIds.todo },\r\n          inProgress: {\r\n            ...columns.inProgress,\r\n            taskIds: columnTaskIds.inProgress,\r\n          },\r\n          done: { ...columns.done, taskIds: columnTaskIds.done },\r\n        });\r\n      } catch (err) {\r\n        console.error(\"Error fetching tasks:\", err);\r\n      }\r\n    };\r\n\r\n    fetchTasks();\r\n  }, [sendRequest, auth.token, userId]);\r\n\r\n  const onDragEnd = async (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) return;\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    )\r\n      return;\r\n\r\n    const start = columns[source.droppableId];\r\n    const finish = columns[destination.droppableId];\r\n\r\n    const newColumns = { ...columns };\r\n\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    newColumns[source.droppableId] = {\r\n      ...start,\r\n      taskIds: startTaskIds,\r\n    };\r\n    newColumns[destination.droppableId] = {\r\n      ...finish,\r\n      taskIds: finishTaskIds,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/tasks/${draggableId}/status`,\r\n        \"PATCH\",\r\n        JSON.stringify({ status: destination.droppableId }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n\r\n      setTasks({\r\n        ...tasks,\r\n        [draggableId]: {\r\n          ...tasks[draggableId],\r\n          status: destination.droppableId,\r\n        },\r\n      });\r\n    } catch (err) {\r\n      setColumns(columns);\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (deletedTaskId) => {\r\n    setTasks((prevTasks) => {\r\n      const updatedTasks = { ...prevTasks };\r\n      delete updatedTasks[deletedTaskId];\r\n      return updatedTasks;\r\n    });\r\n\r\n    setColumns((prevColumns) => {\r\n      const updatedColumns = { ...prevColumns };\r\n      Object.keys(updatedColumns).forEach((columnId) => {\r\n        updatedColumns[columnId] = {\r\n          ...updatedColumns[columnId],\r\n          taskIds: updatedColumns[columnId].taskIds.filter(\r\n            (id) => id !== deletedTaskId\r\n          ),\r\n        };\r\n      });\r\n      return updatedColumns;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorModal error={error} onClear={errorHandler} />\r\n      {isLoading && <LoadingSpinner />}\r\n      <div className=\"users-tasks-container\">\r\n        <div className=\"tasks-header\">\r\n          <h1>Task Management Dashboard</h1>\r\n          <p>\r\n            Welcome to your personal task management space. Here you can organize, track, and manage all your tasks efficiently.\r\n            Drag and drop tasks between columns to update their status, and click on any task to view or edit its details.\r\n          </p>\r\n        </div>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <div className=\"kanban-container\">\r\n            {Object.values(columns).map((column) => (\r\n              <div key={column.id} className=\"kanban-column\">\r\n                <h3 className=\"column-title\">\r\n                  {column.icon}\r\n                  {column.title}\r\n                </h3>\r\n                <Droppable droppableId={column.id}>\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                      className=\"task-list\"\r\n                    >\r\n                      {column.taskIds.length === 0 ? (\r\n                        <div className=\"no-tasks-message\">\r\n                          <FaLightbulb />\r\n                          <p>No tasks found in {column.title}</p>\r\n                        </div>\r\n                      ) : (\r\n                        column.taskIds.map((taskId, index) => {\r\n                          const task = tasks[taskId];\r\n                          if (!task) return null;\r\n                          return (\r\n                            <Draggable\r\n                              key={task.id}\r\n                              draggableId={task.id}\r\n                              index={index}\r\n                            >\r\n                              {(provided) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.draggableProps}\r\n                                  {...provided.dragHandleProps}\r\n                                  className={`task-card priority-${task.priority.toLowerCase()}`}\r\n                                  onClick={() => setSelectedTask(task)}\r\n                                >\r\n                                  <h4 className=\"task-title\">{task.title}</h4>\r\n                                  <p className=\"task-desc\">{task.description}</p>\r\n                                  <div className=\"task-info\">\r\n                                    <div className=\"info-item\">\r\n                                      <FaClock />\r\n                                      {moment(task.dueDate).format(\"MMM D\")}\r\n                                    </div>\r\n                                    <div className=\"info-item\">\r\n                                      <FaExclamationCircle />\r\n                                      {task.priority}\r\n                                    </div>\r\n                                    <div className=\"info-item\">\r\n                                      {task.role === \"admin\" ? (\r\n                                        <FaUserShield />\r\n                                      ) : (\r\n                                        <FaUsers />\r\n                                      )}\r\n                                      {task.creatorName}\r\n                                    </div>\r\n                                    {task.assignedUsers &&\r\n                                      task.assignedUsers.length > 0 && (\r\n                                        <div className=\"info-item assigned-users\">\r\n                                          <FaUsers />\r\n                                          {task.assignedUsers.map((user, index) => (\r\n                                            <span\r\n                                              key={user.id}\r\n                                              className=\"assigned-user\"\r\n                                            >\r\n                                              {user.name}\r\n                                              {index < task.assignedUsers.length - 1\r\n                                                ? \", \"\r\n                                                : \"\"}\r\n                                            </span>\r\n                                          ))}\r\n                                        </div>\r\n                                      )}\r\n                                  </div>\r\n                                </div>\r\n                              )}\r\n                            </Draggable>\r\n                          );\r\n                        })\r\n                      )}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </DragDropContext>\r\n      </div>\r\n\r\n      {selectedTask && (\r\n        <TaskModal\r\n          task={selectedTask}\r\n          onClose={() => setSelectedTask(null)}\r\n          onDelete={deleteHandler}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UsersTasks;\r\n"],"names":["_ref","task","onClose","onDelete","auth","useContext","AuthContext","error","sendRequest","errorHandler","useHttpClient","showConfirm","setShowConfirm","useState","closeConfirmHandler","_jsxs","_Fragment","children","_jsx","ErrorModal","onClear","Modal","show","onCancel","header","className","status","FaClipboardList","FaSpinner","FaCheckCircle","getStatusIcon","title","onClick","FaTimes","footer","Button","inverse","to","concat","id","FaEdit","danger","openConfirmHandler","FaTrash","description","FaCalendarAlt","moment","dueDate","format","priority","toLowerCase","FaExclamationCircle","style","color","getPriorityColor","FaClock","timeline","role","FaUserShield","FaUsers","creatorName","assignedUsers","length","FaUserFriends","map","user","name","FaStickyNote","notes","async","process","Authorization","token","console","UsersTasks","columns","setColumns","todo","taskIds","icon","inProgress","done","tasks","setTasks","selectedTask","setSelectedTask","isLoading","userId","useParams","useEffect","fetchTask","Array","isArray","tasksObject","columnTaskIds","forEach","hasOwnProperty","push","_objectSpread","err","fetchTasks","LoadingSpinner","DragDropContext","onDragEnd","destination","source","draggableId","result","droppableId","index","start","finish","newColumns","startTaskIds","from","splice","finishTaskIds","JSON","stringify","Object","values","column","Droppable","provided","ref","innerRef","droppableProps","FaLightbulb","taskId","Draggable","draggableProps","dragHandleProps","placeholder","TaskModal","deletedTaskId","prevTasks","updatedTasks","prevColumns","updatedColumns","keys","columnId","filter"],"sourceRoot":""}